# ================================
# 远程仓库配置
# ================================
[remote.github]
# 仓库所有者用户名
owner = "sunyink"
# 仓库名称
repo = "MFABD2"
# 注意：本地 git user 需与 GitHub 一致才能正确标注作者


# ================================
# 变更日志生成配置
# ================================
[changelog]
# 变更日志头部内容（固定标题）
header = """
# 更新日志
"""

# 变更日志主体模板（使用Jinja2模板语法）
body = """
{# 定义生成仓库URL的宏 #}
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{# 定义单个提交的打印格式 #}
{% macro print_commit(commit) -%}
    {# 显示作用域（如果有） #}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
    
    {# 标记重大变更 #}
    {% if commit.breaking %}[**breaking**] {% endif %}\
    
    {# 提交消息首字母大写 #}
    {{ commit.message | split(pat="\n") | first | upper_first }} \
    
    {# 标注作者 #}
    @{{ commit.author.name }}
    
    {# 处理共同作者 #}
    {%- if commit.footers -%}
        {%- for footer in commit.footers -%}
            {%- if footer.token == "Co-authored-by" -%}
                {%- set co_author_name = footer.value | split(pat=" <") | first | trim %} @{{ co_author_name }}
            {%- endif -%}
        {%- endfor -%}
    {%- endif %}
{% endmacro -%}

{# 版本标题 #}
{% if version %}\
    ## {{ version | trim_start_matches(pat="v") }} ({{ timestamp | date(format="%Y-%m-%d") }})
{% else %}\
    ## 未发布
{% endif %}\

{# 按分组显示提交 #}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    
    {# 先显示有作用域(scope)的提交，并按作用域排序 #}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::print_commit(commit=commit) }}
    {%- endfor %}
    
    {# 再显示没有作用域的提交 #}
    {% for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::print_commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor -%}

{# 新贡献者部分 #}
{%- if github -%}
{% if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  ## 新贡献者 ❤️
{% endif %}\
{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  * @{{ contributor.username }} 做出了他们的首次贡献
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor -%}
{%- endif %}
"""

# 变更日志尾部内容
footer = """
"""


# ================================
# Git提交处理配置
# ================================
[git]
# 使用约定式提交格式 (Conventional Commits)
conventional_commits = true

# 不过滤非约定式提交 (保留所有提交)
filter_unconventional = false

# 不拆分提交 (保留完整commit信息)
split_commits = false

# 不特别保护破坏性变更提交
protect_breaking_commits = false

# 提交解析规则 - 将提交分类到不同组
# 格式: {匹配规则, 分组名称}
# 注意: (?i) 前缀使匹配不区分大小写
commit_parsers = [
    # 新功能 (feature)
    { message = "^(?i)feat", group = "<!-- 0 -->✨ 新功能" },
    
    # Bug修复
    { message = "^(?i)fix", group = "<!-- 1 -->🐛 Bug修复" },
    
    # 文档更新
    { message = "^(?i)docs", group = "<!-- 4 -->📚 文档" },
    
    # 性能优化
    { message = "^(?i)perf", group = "<!-- 3 -->🚀 性能优化" },
    
    # 代码重构
    { message = "^(?i)refactor", group = "<!-- 2 -->🚜 代码重构" },
    
    # 代码样式调整 (不影响功能)
    { message = "^(?i)style", group = "<!-- 5 -->🎨 样式" },
    
    # 测试相关
    { message = "^(?i)test", group = "<!-- 6 -->🧪 测试" },
    
    # 依赖更新 (特殊chore类型)
    { message = "^(?i)chore\\(deps\\)", group = "📦 依赖更新" },
    
    # 日常维护 (杂项)
    { message = "^(?i)chore", group = "<!-- 8 -->🔧 日常维护" },
    
    # 持续集成配置
    { message = "^(?i)ci", group = "<!-- 7 -->⚙️ 持续集成" },
    
    # 安全相关 (在提交正文中包含"security")
    { body = "(?i).*security", group = "<!-- 9 -->🔒 安全" },
    
    # 撤销提交
    { message = "^(?i)revert", group = "<!-- 10 -->◀️ 撤销" },
    
    # 默认分组 (其他未匹配的提交)
    { message = ".*", group = "其他变更" }
]

# 忽略rc标签 (不会为rc版本生成变更日志)
ignore_tags = "rc"

# 提交排序规则 ("oldest" - 从旧到新; "newest" - 从新到旧)
sort_commits = "oldest"

# ================================
# GitHub集成配置
# ================================
[git.github]
# 启用GitHub集成 (获取PR信息、贡献者数据等)
commits = true