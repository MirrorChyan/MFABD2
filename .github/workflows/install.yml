name: install

on:
  push:
    tags:
      - "v*"
    branches:
      - "**"
    paths:
      - ".github/workflows/install.yml"
      - "assets/**"
      - "**.py"
  pull_request:
    branches:
      - "**"
    paths:
      - ".github/workflows/install.yml"
      - "assets/**"
      - "**.py"
  workflow_dispatch:

jobs:
  meta:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: set_tag
        run: |
          # 使用环境变量获取引用信息
          is_tag_push=false
          if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            is_tag_push=true
          fi
          
          if [ "$is_tag_push" = true ]; then
            # 从环境变量提取标签名
            tag="${GITHUB_REF#refs/tags/}"
          else
            # 非标签推送：生成开发版本号
            latest_tag=$(git describe --tags --极速下载match "v*" --abbrev=0 2>/dev/null || echo "v0.0.0")
            commit_short=$(git rev-parse --short HEAD)
            date_suffix=$(date +"%y%m%d")
            tag="${latest_tag}-ci.${date_suffix}-${commit_short}"
          fi
          
          # 设置开发版本标识
          if [ "$is_tag_push" = true ]; then
            is_dev_version=false
          else
            is_dev_version=true
          fi

          # 输出变量
          echo "tag=$tag" | tee -a $GITHUB_OUTPUT
          echo "is_tag_push=$is_tag_push" | tee -a $GITHUB_OUTPUT
          echo "is_dev_version=$is_dev_version" | tee -a $GITHUB_OUTPUT
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
      is_tag_push: ${{ steps.set_tag.outputs.is_tag_push }}
      is_dev_version: ${{ steps.set_tag.outputs.is_dev_version }}

  install:
    needs: meta
    runs-on: macos-latest
    strategy:
      matrix:
        os: [win, macos, linux, android]
        arch: [aarch64, x86_64]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Download MaaFramework
        uses: robinraju/release-downloader@v1
        with:
          repository: MaaXYZ/MaaFramework
          fileName: "MAA-${{ matrix.os }}-${{ matrix.arch }}*"
          latest: true
          out-file-path: "deps"
          extract: true

      - name: Download MFAAvalonia
        if: matrix.os != 'android'
        id: download_mfa
        uses: robinraju/release-downloader@v1
        with:
          repository: SweetSmellFox/MFAAvalonia
          fileName: "MFAAvalonia-*-${{ (matrix.os == 'win' && 'win') || (matrix.os == 'macos' && 'osx') || (matrix.os == 'linux' && 'linux') }}-${{ (matrix.arch == 'x86_64' && 'x64') || (matrix.arch == 'aarch64' && 'arm64') }}*"
          latest: true
          out-file-path: "MFA"
          extract: true

      - name: Clean up MFAAvalonia archive
        if: matrix.os != 'android'
        shell: bash
        run: |
          ARCHIVE_FILE_PATH="${{ fromJson(steps.download_mfa.outputs.downloaded_files)[0] }}"
          rm -f "${ARCHIVE_FILE_PATH}"

      - name: Install
        shell: bash
        run: |
          python ./install.py ${{ needs.meta.outputs.tag }}

          if [[ "${{ matrix.os }}" != "android" ]]; then
            if [ -d "MFA" ]; then
              mkdir -p install
              rsync -av --ignore-existing MFA/ install/
            fi
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: MFABD2-${{ matrix.os }}-${{ matrix.arch }}
          path: "install"

  changelog:
    name: Generate changelog
    runs-on: ubuntu-latest
    outputs:
      release_body: ${{ steps.git-cliff.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: .github/cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md
          GITHUB_REPO: ${{ github.repository }}

  release:
    if: (needs.meta.outputs.is_tag_push == 'true') || (github.event_name == 'workflow_dispatch' && needs.meta.outputs.is_dev_version == 'true')
    needs: [meta, install, changelog]
    runs-on: ubuntu-latest
    steps:
      - name: Get current timestamp
        id: get_time
        run: echo "time=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
      
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Package release assets
        run: |
          cd artifacts
          mkdir -p release_assets
          for dir in *; do
            # 提取平台信息
            platform=${dir#MFABD2-}
            zip_name="MFABD2-${{ needs.meta.outputs.tag }}-${platform}.zip"
            
            # 创建压缩包
            (cd "$dir" && zip -r "../release_assets/$zip_name" .)
          done
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/release_assets/*.zip
          tag_name: ${{ needs.meta.outputs.tag }}
          name: "MFABD2 ${{ needs.meta.outputs.tag }}"
          body: |
            ${{ contains(needs.changelog.outputs.release_body, '## ') && needs.changelog.outputs.release_body || '### 无显著变更' }}
            
            **构建信息**:
            - 版本: `${{ needs.meta.outputs.tag }}`
            - 类型: ${{ needs.meta.outputs.is_tag_push == 'true' && '正式版' || '开发版' }}
            - 构建时间: ${{ steps.get_time.outputs.time }}
          draft: false
          prerelease: ${{ needs.meta.outputs.is_dev_version == 'true' }}
        env:  # 添加环境变量以支持高限额API调用
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}